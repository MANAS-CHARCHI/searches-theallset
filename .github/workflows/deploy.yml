name: CI/CD

on:
  push:
    branches:
      - dev
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup SSH key
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/theallset.pem
          chmod 600 ~/.ssh/theallset.pem
          ssh-keyscan -H ${{ secrets.AWS_EC2_DEV_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.AWS_EC2_PROD_IP }} >> ~/.ssh/known_hosts

      # 3. Decide target env
      - name: Set environment
        run: |
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "EC2_IP=${{ secrets.AWS_EC2_DEV_IP }}" >> $GITHUB_ENV
            echo "TARGET_DIR=~/searches_theallset_dev" >> $GITHUB_ENV
            echo "DOCKER_COMPOSE=docker-compose.dev.yml" >> $GITHUB_ENV
            echo "ENV_FILE=${{ secrets.DEV_ENV_FILE }}" >> $GITHUB_ENV
          else
            echo "EC2_IP=${{ secrets.AWS_EC2_PROD_IP }}" >> $GITHUB_ENV
            echo "TARGET_DIR=~/searches_theallset" >> $GITHUB_ENV
            echo "DOCKER_COMPOSE=docker-compose.prod.yml" >> $GITHUB_ENV
            echo "ENV_FILE=${{ secrets.PROD_ENV_FILE }}" >> $GITHUB_ENV
          fi
          echo "EC2_USER=${{ secrets.EC2_USER }}" >> $GITHUB_ENV

      # 4. Setup Node.js for frontend build
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # adjust if your project uses a different version

      # 5. Build frontend (React)
      - name: Build frontend
        run: |
          cd manas.ai
          npm install
          npm run build
          cd ..

      # 6. Copy backend (ignore venv)
      - name: Copy backend
        run: |
          rsync -avz --delete --exclude 'venv/' -e "ssh -i ~/.ssh/theallset.pem" ./api.manas.ai $EC2_USER@$EC2_IP:$TARGET_DIR/

      # 7. Upload environment file
      - name: Upload environment file
        run: |
          echo "$ENV_FILE" > .env
          scp -i ~/.ssh/theallset.pem .env $EC2_USER@$EC2_IP:$TARGET_DIR/api.manas.ai/.env
          rm .env

      # 8. Copy frontend dist + nginx configs
      - name: Copy frontend
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/theallset.pem" ./manas.ai/dist $EC2_USER@$EC2_IP:$TARGET_DIR/manas.ai/
          rsync -avz -e "ssh -i ~/.ssh/theallset.pem" ./manas.ai/nginx* $EC2_USER@$EC2_IP:$TARGET_DIR/manas.ai/

      # 9. Copy docker-compose files
      - name: Copy docker-compose
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/theallset.pem" ./docker-compose* $EC2_USER@$EC2_IP:$TARGET_DIR/

      # 10. Restart Docker Compose on EC2
      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/theallset.pem $EC2_USER@$EC2_IP "
            cd $TARGET_DIR && \
            docker-compose -f $DOCKER_COMPOSE down && \
            docker-compose -f $DOCKER_COMPOSE up -d --build
          "
